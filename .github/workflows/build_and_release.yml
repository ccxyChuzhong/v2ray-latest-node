name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*' # 增加对 v 开头的标签的支持，用于发布
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发
  
# 添加这个权限配置
permissions:
  contents: write  # 给予写入内容的权限，包括创建发布

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          
      - name: Flutter clean and pub get
        run: |
          flutter clean
          cd android && ./gradlew clean && cd ..
          flutter pub get

      - name: Build APK
        run: flutter build apk --release --verbose
      
      - name: Check APK exists
        run: |
          echo "Checking APK file path:"
          find build -name "*.apk" -type f
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@main
        with:
          name: android-release
          path: build/app/outputs/flutter-apk/app-release.apk
  
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      
      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop
      
      - name: Flutter pub get
        run: flutter pub get
      
      - name: Build Windows
        run: flutter build windows --release
      
      - name: Check Windows build outputs
        shell: powershell
        run: |
          Write-Host "Checking Windows build outputs:"
          Get-ChildItem -Path build -Recurse -Include "*.exe" | ForEach-Object { Write-Host $_.FullName }
          
          # 检查Release目录
          if (Test-Path "build/windows/runner/Release") {
            Write-Host "Release directory exists:"
            Get-ChildItem -Path "build/windows/runner/Release" | ForEach-Object { Write-Host $_.FullName }
          } else {
            Write-Host "Release directory does not exist"
            # 查找可能的替代位置
            Get-ChildItem -Path build/windows -Recurse -Directory | ForEach-Object { Write-Host $_.FullName }
          }
      
      - name: Create Windows ZIP package
        shell: powershell
        run: |
          $date = Get-Date -Format "yyyy-MM-dd"
          $zipName = "windows-release-$date.zip"
          Compress-Archive -Path "build/windows/runner/Release/*" -DestinationPath "$zipName"
          Write-Host "Created ZIP package: $zipName"
          
      - name: Upload Windows ZIP artifact
        uses: actions/upload-artifact@main
        with:
          name: windows-zip
          path: windows-release-*.zip
  
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      
      - name: Enable macOS Desktop
        run: flutter config --enable-macos-desktop
      
      - name: Flutter pub get
        run: flutter pub get
      
      - name: Build macOS
        run: flutter build macos --release
      
      - name: Check macOS build outputs
        run: |
          echo "Checking macOS build outputs:"
          find build/macos -name "*.app" -type d
          
          # 获取app名称用于DMG创建
          APP_PATH=$(find build/macos/Build/Products/Release -name "*.app" -type d)
          APP_NAME=$(basename "$APP_PATH" .app)
          echo "Found app: $APP_NAME at $APP_PATH"
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
      
      - name: Create macOS APP ZIP package
        run: |
          DATE=$(date +"%Y-%m-%d")
          ZIP_NAME="macos-app-$DATE.zip"
          cd $(dirname "$APP_PATH")
          zip -r "$ZIP_NAME" "$(basename "$APP_PATH")"
          mv "$ZIP_NAME" $GITHUB_WORKSPACE/
          echo "Created ZIP package: $ZIP_NAME"
      
      - name: Create DMG
        run: |
          brew install create-dmg
          create-dmg \
            --volname "开导" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            "build/macos/kaidao.dmg" \
            "${{ env.APP_PATH }}"
      
      - name: Upload macOS APP ZIP artifact
        uses: actions/upload-artifact@main
        with:
          name: macos-app-zip
          path: macos-app-*.zip
          
      - name: Upload DMG artifact
        uses: actions/upload-artifact@main
        with:
          name: macos-dmg
          path: build/macos/*.dmg
  
  release:
    needs: [build-android, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/')  # 只在标签推送时执行
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@main
        
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            android-release/app-release.apk
            windows-zip/*.zip
            macos-app-zip/*.zip
            macos-dmg/*.dmg
          draft: false
          prerelease: false
          generate_release_notes: true
